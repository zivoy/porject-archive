package com.zivoy.module2;

import javax.swing.*;

public class Main {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new ProgramSelector("Select Program to Run");
            frame.setVisible(true);
        });
    }
}
package com.zivoy.module2;

public class Book {
    int id;
    String name;

    public String getName() {
        return name;
    }

    public int getId() {
        return id;
    }

    Book(int id, String name) {
        this.id = id;
        this.name = name;
    }
}
package com.zivoy.module2.sorting;

import java.util.List;

public class BubbleSort<T> extends Sort<T> {
    public BubbleSort(List<T> inputList) {
        super(inputList, "Bubble Sort");
    }

    public BubbleSort() {
        super("Bubble Sort");
    }

    @Override
    public SortResult sort() {
        loopsExecuted = 0;
        comparisonsMade = 0;
        valuesShifted = 0;
        long startTime = System.currentTimeMillis();

        boolean swapped;

        do {
            loopsExecuted++;
            swapped = false;
            for (int i = 0; i < itemList.size() - 1; i++) {
                loopsExecuted++;

                comparisonsMade++;
                if (compare(itemList.get(i), itemList.get(i + 1)) > 0) {
                    swap(i, i + 1);
                    swapped = true;
                }
            }

        } while (swapped);

        timeTook = System.currentTimeMillis() - startTime;
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }
}
package com.zivoy.module2.sorting;

import java.util.List;

public class InsertSort<T> extends Sort<T> {
    public InsertSort(List<T> inputList) {
        super(inputList, "Insertion Sort");
    }

    public InsertSort() {
        super("Insertion Sort");
    }

    private void shift(int start, int index) {
        T value = itemList.get(index);
        T curr;
        int i;
        for (i = start; i < index; i++) {
            loopsExecuted++;
            valuesShifted++;
            curr = itemList.get(i);
            itemList.set(i, value);
            value = curr;
        }
        valuesShifted++;
        itemList.set(i, value);
    }

    @Override
    public SortResult sort() {
        loopsExecuted = 0;
        comparisonsMade = 0;
        valuesShifted = 0;
        long startTime = System.currentTimeMillis();

        int startSearch = 0;

        while (true) {
            loopsExecuted++;
            int sortTill = sortedUntil(startSearch);

            if (sortTill == -1) break;

            T breakingVal = itemList.get(sortTill);
            int start = 0;
            for (int i = sortTill - 1; i >= 0; i--) {
                loopsExecuted++;
                if (compare(breakingVal, itemList.get(i)) <= 0) {
                    start = i;
                    break;
                }
            }
            startSearch = Math.max(start - 1, 0);
            shift(start, sortTill);
        }

        timeTook = System.currentTimeMillis() - startTime;
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }
}
package com.zivoy.module2.sorting;

import java.util.List;

public class MergeSort<T> extends Sort<T> {
    public MergeSort(List<T> inputList) {
        super(inputList, "Merge Sort");
    }

    public MergeSort() {
        super("Merge Sort");
    }

    @Override
    public SortResult sort() {
        loopsExecuted = 0;
        comparisonsMade = 0;
        valuesShifted = 0;
        long startTime = System.currentTimeMillis();

        sort(itemList);

        timeTook = System.currentTimeMillis() - startTime;
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }

    void sort(List<T> list) {
        int length = list.size();
        if (length < 2) {
            return;
        }

        int mid = length / 2;
        List<T> left = subList(list, 0, mid);
        List<T> right = subList(list, mid, length);

        sort(left);
        sort(right);

        merge(list, left, right);
    }

    private void merge(List<T> a, List<T> left, List<T> right) {
        int sNum = left.size();
        int eNum = right.size();
        int sCurr = 0, eCurr = 0;

        for (int i = 0; i < sNum + eNum; i++) {
            loopsExecuted++;
            T val;
            if (sCurr < left.size() && eCurr < right.size()) {
                T sVal = left.get(sCurr);
                T eVal = right.get(eCurr);
                if (compare(sVal, eVal) <= 0) {
                    val = sVal;
                    sCurr++;

                } else {
                    val = eVal;
                    eCurr++;
                }

            } else {
                if (sCurr < left.size()) {
                    val = left.get(sCurr);
                    sCurr++;
                } else {
                    val = right.get(eCurr);
                    eCurr++;
                }
            }

            valuesShifted++;
            a.set(i, val);
        }
    }
}
package com.zivoy.module2.sorting;

import java.util.List;

public class SelectionSort<T> extends Sort<T> {
    public SelectionSort(List<T> inputList) {
        super(inputList, "Selection Sort");
    }

    public SelectionSort() {
        super("Selection Sort");
    }

    @Override
    public SortResult sort() {
        loopsExecuted = 0;
        comparisonsMade = 0;
        valuesShifted = 0;
        long startTime = System.currentTimeMillis();

        for (int i = 0; i < itemList.size() - 1; i++) {
            loopsExecuted++;
            int smallest = min(i);
            comparisonsMade++;
            if (smallest == i) continue;
            swap(i, smallest);
        }

        timeTook = System.currentTimeMillis() - startTime;
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }
}
package com.zivoy.module2.sorting;

import com.zivoy.module2.Book;

import java.util.ArrayList;
import java.util.List;

public abstract class Sort<T> {
    long loopsExecuted;
    long comparisonsMade;
    long valuesShifted;
    long timeTook;
    String sortName;
    List<T> itemList;

    public Sort(List<T> inputList, String sortName) {
        this.itemList = inputList;
        loopsExecuted = 0;
        comparisonsMade = 0;
        valuesShifted = 0;
        timeTook = 0;
        this.sortName = sortName;
    }

    public Sort(String sortName) {
        this(new ArrayList<>(), sortName);
    }

    public void copyToItemList(List<T> inputList) {
        this.itemList = subList(inputList, 0, inputList.size());
    }

    int compare(int item1, int item2) {
        comparisonsMade++;
        return Integer.compare(item1, item2);
    }

    int compare(long item1, long item2) {
        comparisonsMade++;
        return Long.compare(item1, item2);
    }

    int compare(String item1, String item2) {
        if (item1.equals(item2)) return 0;
        comparisonsMade++;
        int smallerLength = Math.min(item1.length(), item2.length());

        for (int i = 0; i < smallerLength; i++) {
            comparisonsMade++;
            loopsExecuted++;
            int car1 = item1.charAt(i);
            int car2 = item2.charAt(i);
            if (car1 == car2)
                continue;
            return 1;//first is bigger
        }
        comparisonsMade++;
        if (smallerLength == item2.length()) return -1;
        return 1;
    }

    int compare(Book item1, Book item2) {
        return compare(item1.getId(), item2.getId());
    }

    int compare(T item1, T item2) {
        if (!item1.getClass().equals(item2.getClass())) return 2;//not same type change this later

        if (item1 instanceof Integer) return compare((Integer) item1, (Integer) item2);
        if (item1 instanceof Long) return compare((Long) item1, (Long) item2);
        if (item1 instanceof String) return compare((String) item1, (String) item2);
        if (item1 instanceof Book) return compare((Book) item1, (Book) item2);

        return 2; //unsupported type
    }

    // returns index of smallest
    int min(int start, int end) {
        T smallest = itemList.get(start);
        int index = start;
        for (int i = end; i >= start; i--) {
            loopsExecuted++;
            T curr = itemList.get(i);
            if (compare(curr, smallest) < 1) {
                index = i;
                smallest = curr;
            }
        }
        return index;
    }

    int min(int start) {
        return min(start, itemList.size() - 1);
    }

    // -1 is sorted index otherwise
    int sortedUntil(int start) {
        for (int i = start; i < itemList.size() - 1; i++) {
            loopsExecuted++;
            comparisonsMade++;
            if (compare(itemList.get(i), itemList.get(i + 1)) > 0) return i + 1;
        }
        return -1;
    }

    int sortedUntil() {
        return sortedUntil(0);
    }

    boolean isSorted() {
        return sortedUntil() == -1;
    }

    void swap(int start, int index) {
        T curr = itemList.get(start);
        valuesShifted += 2;
        itemList.set(start, itemList.get(index));
        itemList.set(index, curr);
    }

    List<T> subList(List<T> inputArray, int start, int end) {
        List<T> sub = new ArrayList<>();
        for (int i = start; i < end; i++) {
//            loopsExecuted++;
            sub.add(inputArray.get(i));
        }
        return sub;
    }

    List<T> subList(int start, int end) {
        return subList(itemList, start, end);
    }

    public SortResult reverse() {
        long start = System.currentTimeMillis();
        int sCur = 0;
        int eCur = itemList.size() - 1;
        while (sCur < eCur) {
            loopsExecuted++;
            swap(sCur, eCur);
            sCur++;
            eCur--;
        }
        timeTook += System.currentTimeMillis() - start;
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }

    public SortResult sortInfo() {
        return new SortResult(sortName, itemList, loopsExecuted,
                comparisonsMade, valuesShifted, timeTook);
    }

    public List<T> getItemList() {
        return itemList;
    }

    public void setItemList(List<T> inputList) {
        this.itemList = inputList;
    }

    abstract public SortResult sort();
}
package com.zivoy.module2.sorting;

import java.util.List;

public class SortResult {
    List<?> list;
    String sortName;
    long loopsExecuted;
    long comparisonsMade;
    long valuesShifted;
    long millisecondCompletion;

    public SortResult(String sortName, List<?> list, long loopsExecuted,
                      long comparisonsMade, long valuesShifted, long millisecondCompletion) {
        this.list = list;
        this.sortName = sortName;
        this.loopsExecuted = loopsExecuted;
        this.comparisonsMade = comparisonsMade;
        this.valuesShifted = valuesShifted;
        this.millisecondCompletion = millisecondCompletion;
    }

    public SortResult(List<?> list) {
        this("", list, -1, -1, -1, -1);
    }

    @Override
    public String toString() {
        return this.sortName + "\n" +
                "Number of times a comparison was made:\t" + this.comparisonsMade + "\n" +
                "Number of times the loop was executed:\t" + this.loopsExecuted + "\n" +
                "Number of times a value was shifted:\t" + this.valuesShifted + "\n" +
                "number of milliseconds to complete sort:\t" + this.millisecondCompletion + "\n";
    }
}
package com.zivoy.module2.sorting;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class sortTest {

    static int maximum = 7;
    static int minimum = -3;

    public static void main(String[] args) {
        long seed = System.currentTimeMillis();//-12;

        System.out.println(new SelectionSort<>(makeList(seed)).sort());
        System.out.println(new InsertSort<>(makeList(seed)).sort());
        System.out.println(new BubbleSort<>(makeList(seed)).sort());
        System.out.println(new MergeSort<>(makeList(seed)).sort());


        Sort<Integer> a = new SelectionSort<>(makeList(seed));
        a.sort();
        a.sortName = a.sortName + " - Reversed";
        printSort(a.reverse());
    }

    static List<Integer> makeList(long seed) {
        Random rand = new Random(seed);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < 12; i++) list.add(rand.nextInt(maximum - minimum + 1) + minimum);
        return list;
    }

    static void printSort(SortResult res) {
        System.out.println(res.sortName);
//        System.out.println(res.list);
        System.out.println("Number of times a comparison was made:\t\t" + res.comparisonsMade);
        System.out.println("Number of times the loop was executed:\t\t" + res.loopsExecuted);
        System.out.println("Number of times a value was shifted:\t\t" + res.millisecondCompletion);
        System.out.println("number of milliseconds to complete sort:\t" + res.valuesShifted);
        System.out.println();
    }
}
package com.zivoy.module2;

import com.zivoy.module2.sorting.*;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Random;

public class Program1 {

    boolean reversed;
    Random rand;
    int maximum = 1000;
    int minimum = -1000;
    private JPanel mainPanel;
    private JList<Integer> sortedList;
    private JList<Integer> originalList;
    private JRadioButton selectionRadioButton;
    private JRadioButton bubbleRadioButton;
    private JRadioButton insertRadioButton;
    private JRadioButton mergeRadioButton;
    private JRadioButton ascendingRadioButton;
    private JRadioButton descendingRadioButton;
    private JSpinner spinner1;
    private JButton generateAndSortNumbersButton;
    private JScrollPane scrollPane1;
    private JScrollPane scrollPane2;
    private Sort<Integer> selectedSort;

    public Program1(JFrame frame) {
        frame.setTitle("Program 1 – Sorting Routines");
        frame.setContentPane(mainPanel);
        frame.setMinimumSize(new Dimension(600, 600));
        frame.setSize(new Dimension(500, 500));
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        rand = new Random();

        selectedSort = new SelectionSort<>();
        reversed = false;

        descendingRadioButton.addActionListener(actionEvent -> reversed = true);
        ascendingRadioButton.addActionListener(actionEvent -> reversed = false);

        selectionRadioButton.addActionListener(actionEvent -> selectedSort = new SelectionSort<>());
        bubbleRadioButton.addActionListener(actionEvent -> selectedSort = new BubbleSort<>());
        insertRadioButton.addActionListener(actionEvent -> selectedSort = new InsertSort<>());
        mergeRadioButton.addActionListener(actionEvent -> selectedSort = new MergeSort<>());

        generateAndSortNumbersButton.addActionListener(actionEvent -> {
            int numberOfItems = (int) spinner1.getValue();
            ArrayList<Integer> items = new ArrayList<>();

            for (int i = 0; i < numberOfItems; i++) {
                items.add(rand.nextInt(maximum - minimum + 1) + minimum);
            }
            selectedSort.copyToItemList(items);
            selectedSort.sort();
            if (reversed) selectedSort.reverse();

            ArrayList<Integer> sortedList = (ArrayList<Integer>) selectedSort.getItemList();

            DefaultListModel<Integer> unsorted = new DefaultListModel<>();
            DefaultListModel<Integer> sorted = new DefaultListModel<>();

            for (int i = 0; i < items.size(); i++) {
                unsorted.addElement(items.get(i));
                sorted.addElement(sortedList.get(i));
            }

            originalList.setModel(unsorted);
            this.sortedList.setModel(sorted);
        });
    }

    private void createUIComponents() {
        spinner1 = new JSpinner(new SpinnerNumberModel(25, 2, 50000, 1));
        scrollPane1 = new JScrollPane();
        scrollPane2 = new JScrollPane();
        BoundedRangeModel model = scrollPane1.getVerticalScrollBar().getModel();
        scrollPane2.getVerticalScrollBar().setModel(model);
        scrollPane2.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
    }
}
package com.zivoy.module2;

import com.zivoy.module2.sorting.*;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;

public class Program2 {
    boolean reversed;
    int numberOfElements;
    boolean updateSorted;
    Random rand;
    ConcurrentLinkedQueue<String> appendList;
    int canRun;
    int maximum = 10000;
    int minimum = -10000;
    private JTextArea outputTextArea;
    private JRadioButton a10RadioButton;
    private JRadioButton a100RadioButton;
    private JRadioButton a1000RadioButton;
    private JRadioButton a5000RadioButton;
    private JButton generateAndSortNumbersButton;
    private JRadioButton ascendingRadioButton;
    private JRadioButton descendingRadioButton;
    private JList<Integer> originalList;
    private JList<Integer> sortedList;
    private JPanel mainPanel;


    public Program2(JFrame frame) {
        frame.setTitle("Program 2 – Sorting Efficiencies");
        frame.setContentPane(mainPanel);
        frame.setMinimumSize(new Dimension(620, 650));
        frame.setSize(new Dimension(520, 550));
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        rand = new Random();
        appendList = new ConcurrentLinkedQueue<>();
        canRun = 0;

        reversed = false;
        numberOfElements = 100;

        descendingRadioButton.addActionListener(actionEvent -> reversed = true);
        ascendingRadioButton.addActionListener(actionEvent -> reversed = false);

        a10RadioButton.addActionListener(actionEvent -> numberOfElements = 10);
        a100RadioButton.addActionListener(actionEvent -> numberOfElements = 100);
        a1000RadioButton.addActionListener(actionEvent -> numberOfElements = 1000);
        a5000RadioButton.addActionListener(actionEvent -> numberOfElements = 5000);

        generateAndSortNumbersButton.addActionListener(actionEvent -> {
            if (canRun > 0) return;
            outputTextArea.setText("");
            ArrayList<Integer> items = new ArrayList<>();

            for (int i = 0; i < numberOfElements; i++) {
                items.add(rand.nextInt(maximum - minimum + 1) + minimum);
            }

            updateSorted = true;

            canRun = 4;
            Thread[] sorts = new Thread[4];
            sorts[0] = new Thread(() -> sortAction(new MergeSort<>(), items));
            sorts[1] = new Thread(() -> sortAction(new InsertSort<>(), items));
            sorts[2] = new Thread(() -> sortAction(new BubbleSort<>(), items));
            sorts[3] = new Thread(() -> sortAction(new SelectionSort<>(), items));

            for (Thread i : sorts) i.start();

            DefaultListModel<Integer> unsorted = new DefaultListModel<>();

            for (Integer i : items) {
                unsorted.addElement(i);
            }

            originalList.setModel(unsorted);
            originalList.revalidate();

            for (Thread i : sorts) {
                try {
                    i.join();
                    while (!appendList.isEmpty())
                        outputTextArea.append(appendList.poll());
                    outputTextArea.revalidate();
                    canRun--;

                } catch (InterruptedException e) {
                    System.exit(-1);
                }
            }
        });
        frame.revalidate();
    }

    private void sortAction(Sort<Integer> sortSelection, ArrayList<Integer> items) {
        sortSelection.copyToItemList(items);
        sortSelection.sort();
        if (reversed) sortSelection.reverse();

        if (updateSorted) {
            updateSorted = false;
            DefaultListModel<Integer> sorted = new DefaultListModel<>();
            for (Integer i : sortSelection.getItemList()) {
                sorted.addElement(i);
            }
            sortedList.setModel(sorted);
            sortedList.revalidate();
        }

        appendList.add(sortSelection.sortInfo().toString() + "\n");
    }

    private void createUIComponents() {
        outputTextArea = new JTextArea();
        outputTextArea.setMargin(new Insets(5, 5, 5, 5));
    }
}
package com.zivoy.module2;

import com.zivoy.module2.sorting.MergeSort;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Objects;

public class Program4 {
    private JPanel mainPanel;
    private JButton button1;
    private JFormattedTextField titleTextField;
    private JFormattedTextField bTextField;
    private JFormattedTextField lTextField;
    private JSpinner spinner1;

    ArrayList<Book> bookList;
    Search binary;
    Search serial;

    void readBooks(String resourceName) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(Objects.requireNonNull(
                    Program4.class.getClassLoader().getResourceAsStream(resourceName))));

            String id;
            while ((id = reader.readLine()) != null) {
                String name = reader.readLine();
                if (name == null) break;

                bookList.add(new Book(Integer.parseInt(id), name));
            }

            reader.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        new MergeSort<>(bookList).sort();
        System.out.println(bookList.size()+" books loaded");
    }

    public Program4(JFrame frame) {
        frame.setTitle("Program 4 – ID Searcher");
        frame.setContentPane(mainPanel);
        frame.setMinimumSize(new Dimension(400, 400));
        frame.setSize(new Dimension(300, 300));
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        bookList = new ArrayList<>();
        binary = new BinarySearch(bookList);
        serial = new LinearSearch(bookList);

        readBooks("Booklist.txt");

        spinner1.addChangeListener(e -> setSpinnerColor(Color.WHITE));

        button1.addActionListener(actionEvent -> {
            titleTextField.setValue("");

            int value = (int) spinner1.getValue();

            serial.search(value);
            if (binary.search(value).getIndex() == -1)
                setSpinnerColor(Color.decode("#FF9494"));
            else
                titleTextField.setValue(bookList.get(binary.getIndex()).getName());

            lTextField.setValue(serial.getComparisonsMade()+" Comparisons");
            bTextField.setValue(binary.getComparisonsMade()+" Comparisons");
        });
    }

    void setSpinnerColor(Color color) {
        JSpinner.NumberEditor jsEditor = (JSpinner.NumberEditor)
                spinner1.getEditor();
        jsEditor.getTextField().setBackground(color);
    }

    interface Search {
        long comparisonsMade = 0;
        int itemIndex = -1;
        ArrayList<Book> array = new ArrayList<>();

        int getIndex();

        long getComparisonsMade();

        Search search(int value);

    }

    static class BinarySearch implements Search {
        long comparisonsMade;
        int itemIndex;
        ArrayList<Book> array;

        public int getIndex() {
            return itemIndex;
        }

        public long getComparisonsMade() {
            return comparisonsMade;
        }

        BinarySearch(ArrayList<Book> array) {
            comparisonsMade = 0;
            itemIndex = -1;
            this.array = array;
        }

        public BinarySearch search(int value) {
            comparisonsMade = 0;
            return search(value, 0, array.size() - 1);
        }

        BinarySearch search(int value, int left, int right) {
            if (right >= left) {
                int middle = left + (right - left) / 2;

                comparisonsMade++;
                if (array.get(middle).getId() == value) {
                    itemIndex = middle;
                    return this;
                }

                if (array.get(middle).getId() > value) return search(value, left, middle - 1);
                return search(value, middle + 1, right);
            }
            itemIndex = -1;
            return this;
        }
    }

    static class LinearSearch implements Search {
        long comparisonsMade;
        int itemIndex;
        ArrayList<Book> array;

        public int getIndex() {
            return itemIndex;
        }

        public long getComparisonsMade() {
            return comparisonsMade;
        }

        LinearSearch(ArrayList<Book> array) {
            comparisonsMade = 0;
            itemIndex = -1;
            this.array = array;
        }

        public LinearSearch search(int value) {
            comparisonsMade = 0;
            for (int i = 0; i < array.size(); i++) {
                comparisonsMade++;
                if (array.get(i).getId() == value) {
                    itemIndex = i;
                    return this;
                }
            }
            itemIndex = -1;
            return this;
        }
    }
}

package com.zivoy.module2;

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.Objects;

public class ProgramSelector extends JFrame {
    String title;
    private JPanel mainPanel;
    private JButton buttonProgram1;
    private JButton buttonProgram2;
    private JButton buttonProgram3;
    private JButton buttonProgram4;

    public ProgramSelector(String title) {
        super(title);
        this.title = title;
        this.setContentPane(mainPanel);
        this.setMinimumSize(new Dimension(100, 250));
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        JFrame frame = this;

        frame.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                if (!frame.getTitle().equals(title)) {
                    frame.setTitle(title);
                    frame.setContentPane(mainPanel);
                    frame.setMinimumSize(new Dimension(100, 250));
                    frame.setSize(new Dimension(100, 250));
                    frame.revalidate();
                } else {
                    if (JOptionPane.showConfirmDialog(frame,
                            "Are you sure you want to close this window?", "Close Window?",
                            JOptionPane.YES_NO_OPTION,
                            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
                        System.exit(0);
                    }
                }
            }
        });

        buttonProgram1.addActionListener(actionEvent -> {
            new Program1(frame);
            frame.revalidate();
        });
        buttonProgram2.addActionListener(actionEvent -> {
            new Program2(frame);
            frame.revalidate();
        });
        buttonProgram3.addActionListener(actionEvent -> {
            ImageIcon icon = new ImageIcon(
                    Objects.requireNonNull(ProgramSelector.class.getClassLoader().getResource("dio.jpg")));
            JOptionPane.showMessageDialog(this,
                    "You expected Program 3,\n\nBut it was me, Program 4!", "HAH!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
            new Program4(frame);
            frame.revalidate();
        });
        buttonProgram4.addActionListener(actionEvent -> {
            new Program4(frame);
            frame.revalidate();
        });
    }
}
<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.zivoy.module2.Program1">
  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="3" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="0" vgap="0">
    <margin top="5" left="5" bottom="5" right="5"/>
    <constraints>
      <xy x="20" y="20" width="552" height="400"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <grid id="36de3" layout-manager="GridLayoutManager" row-count="1" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <grid id="c5bc6" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <component id="b8ff1" class="javax.swing.JLabel">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="Sorted  Numbers"/>
                </properties>
              </component>
              <scrollpane id="9319a" binding="scrollPane2" custom-create="true">
                <constraints>
                  <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="ee8d7" class="javax.swing.JList" binding="sortedList">
                    <constraints/>
                    <properties/>
                  </component>
                </children>
              </scrollpane>
            </children>
          </grid>
          <grid id="ad234" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <component id="8439a" class="javax.swing.JLabel">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="Original Numbers"/>
                </properties>
              </component>
              <scrollpane id="3b7f2" binding="scrollPane1" custom-create="true">
                <constraints>
                  <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="4968d" class="javax.swing.JList" binding="originalList">
                    <constraints/>
                    <properties/>
                  </component>
                </children>
              </scrollpane>
            </children>
          </grid>
        </children>
      </grid>
      <grid id="b01c2" layout-manager="GridLayoutManager" row-count="3" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="d164c" class="javax.swing.JLabel">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties>
              <text value="Enter the following infromation"/>
            </properties>
          </component>
          <grid id="846a1" layout-manager="GridLayoutManager" row-count="1" column-count="5" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <grid id="d7030" layout-manager="GridLayoutManager" row-count="5" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="dd28c" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Sorting Algorithm:"/>
                    </properties>
                  </component>
                  <component id="c3c93" class="javax.swing.JRadioButton" binding="selectionRadioButton" default-binding="true">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <selected value="true"/>
                      <text value="Selection"/>
                    </properties>
                  </component>
                  <component id="b8336" class="javax.swing.JRadioButton" binding="bubbleRadioButton" default-binding="true">
                    <constraints>
                      <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Bubble"/>
                    </properties>
                  </component>
                  <component id="befbd" class="javax.swing.JRadioButton" binding="insertRadioButton" default-binding="true">
                    <constraints>
                      <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Insert"/>
                    </properties>
                    <clientProperties>
                      <hideActionText class="java.lang.Boolean" value="false"/>
                    </clientProperties>
                  </component>
                  <component id="29396" class="javax.swing.JRadioButton" binding="mergeRadioButton" default-binding="true">
                    <constraints>
                      <grid row="3" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Merge"/>
                    </properties>
                  </component>
                  <hspacer id="5d00e">
                    <constraints>
                      <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </hspacer>
                  <vspacer id="e8bb8">
                    <constraints>
                      <grid row="4" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </vspacer>
                </children>
              </grid>
              <grid id="99066" layout-manager="GridLayoutManager" row-count="3" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="3" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="13264" class="javax.swing.JRadioButton" binding="descendingRadioButton" default-binding="true">
                    <constraints>
                      <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <enabled value="true"/>
                      <selected value="false"/>
                      <text value="Descending"/>
                    </properties>
                  </component>
                  <component id="cbd5d" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Sort Order:"/>
                    </properties>
                  </component>
                  <hspacer id="5c366">
                    <constraints>
                      <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </hspacer>
                  <component id="f48bb" class="javax.swing.JRadioButton" binding="ascendingRadioButton" default-binding="true">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <enabled value="true"/>
                      <selected value="true"/>
                      <text value="Ascending"/>
                    </properties>
                  </component>
                  <vspacer id="c99ae">
                    <constraints>
                      <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </vspacer>
                </children>
              </grid>
              <hspacer id="aeb6c">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="93ff6">
                <constraints>
                  <grid row="0" column="4" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="3c9c8">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
            </children>
          </grid>
          <grid id="51bb6" layout-manager="GridLayoutManager" row-count="1" column-count="5" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <grid id="beef4" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="be35b" class="javax.swing.JSpinner" binding="spinner1" custom-create="true" default-binding="true">
                    <constraints>
                      <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="0" hsize-policy="7" anchor="8" fill="1" indent="0" use-parent-layout="false">
                        <minimum-size width="100" height="-1"/>
                      </grid>
                    </constraints>
                    <properties/>
                  </component>
                  <component id="1e257" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Amount of Number to Sort"/>
                    </properties>
                  </component>
                  <hspacer id="42099">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="1" hsize-policy="0" anchor="0" fill="1" indent="0" use-parent-layout="false">
                        <minimum-size width="2" height="-1"/>
                        <maximum-size width="3" height="-1"/>
                      </grid>
                    </constraints>
                  </hspacer>
                </children>
              </grid>
              <grid id="e90e4" layout-manager="GridLayoutManager" row-count="1" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="3" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="2456b" class="javax.swing.JButton" binding="generateAndSortNumbersButton" default-binding="true">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Generate and Sort Numbers"/>
                    </properties>
                  </component>
                </children>
              </grid>
              <hspacer id="623a8">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="7" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="6144b">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="7" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="f298e">
                <constraints>
                  <grid row="0" column="4" row-span="1" col-span="1" vsize-policy="1" hsize-policy="7" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
            </children>
          </grid>
        </children>
      </grid>
      <grid id="33e2" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="c089c" class="javax.swing.JLabel">
            <constraints>
              <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties>
              <font size="40"/>
              <text value="Sorting Routines"/>
            </properties>
          </component>
          <hspacer id="e82c5">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
            </constraints>
          </hspacer>
          <hspacer id="49d2e">
            <constraints>
              <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
            </constraints>
          </hspacer>
        </children>
      </grid>
    </children>
  </grid>
  <buttonGroups>
    <group name="buttonGroupSortTypes">
      <member id="c3c93"/>
      <member id="29396"/>
      <member id="b8336"/>
      <member id="befbd"/>
    </group>
    <group name="buttonGroupOrderBy">
      <member id="13264"/>
      <member id="f48bb"/>
    </group>
  </buttonGroups>
</form>
<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.zivoy.module2.Program2">
  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
    <margin top="5" left="5" bottom="5" right="5"/>
    <constraints>
      <xy x="20" y="20" width="596" height="400"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <grid id="8b88f" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="0" column="0" row-span="1" col-span="2" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <grid id="18626" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <component id="83f96" class="javax.swing.JLabel">
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <font size="40"/>
                  <text value="Sorting Efficiencies"/>
                </properties>
              </component>
              <hspacer id="87706">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="7c7ec">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
            </children>
          </grid>
          <grid id="c1af7" layout-manager="GridLayoutManager" row-count="1" column-count="7" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <component id="ead53" class="javax.swing.JLabel">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="Enter the amount of Numbers in the List:"/>
                </properties>
              </component>
              <component id="6603c" class="javax.swing.JRadioButton" binding="a10RadioButton" default-binding="true">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="10"/>
                </properties>
              </component>
              <hspacer id="134f9">
                <constraints>
                  <grid row="0" column="6" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <component id="4e9d1" class="javax.swing.JRadioButton" binding="a100RadioButton" default-binding="true">
                <constraints>
                  <grid row="0" column="3" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <selected value="true"/>
                  <text value="100"/>
                </properties>
              </component>
              <component id="dce47" class="javax.swing.JRadioButton" binding="a1000RadioButton" default-binding="true">
                <constraints>
                  <grid row="0" column="4" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="1000"/>
                </properties>
              </component>
              <component id="a84a5" class="javax.swing.JRadioButton" binding="a5000RadioButton" default-binding="true">
                <constraints>
                  <grid row="0" column="5" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="5000"/>
                </properties>
              </component>
              <hspacer id="7b835">
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="1" hsize-policy="0" anchor="0" fill="1" indent="0" use-parent-layout="false">
                    <minimum-size width="3" height="-1"/>
                    <maximum-size width="5" height="-1"/>
                  </grid>
                </constraints>
              </hspacer>
            </children>
          </grid>
        </children>
      </grid>
      <grid id="2ced8" layout-manager="GridLayoutManager" row-count="1" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="6" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <scrollpane id="76c60">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="7" anchor="0" fill="3" indent="0" use-parent-layout="false">
                <minimum-size width="300" height="-1"/>
              </grid>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <component id="a8ca2" class="javax.swing.JTextArea" binding="outputTextArea" custom-create="true">
                <constraints/>
                <properties>
                  <editable value="false"/>
                  <font size="12"/>
                </properties>
              </component>
            </children>
          </scrollpane>
        </children>
      </grid>
      <grid id="20976" layout-manager="GridLayoutManager" row-count="2" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="1" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <grid id="f0953" layout-manager="GridLayoutManager" row-count="2" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="1" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <grid id="b0af1" layout-manager="GridLayoutManager" row-count="3" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="3c3a7" class="javax.swing.JRadioButton" binding="ascendingRadioButton" default-binding="true">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <selected value="true"/>
                      <text value="Ascending"/>
                    </properties>
                  </component>
                  <component id="995da" class="javax.swing.JRadioButton" binding="descendingRadioButton" default-binding="true">
                    <constraints>
                      <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Descending"/>
                    </properties>
                  </component>
                  <vspacer id="3297c">
                    <constraints>
                      <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </vspacer>
                  <component id="e2efc" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Sort Order:"/>
                    </properties>
                  </component>
                  <hspacer id="34b17">
                    <constraints>
                      <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </hspacer>
                </children>
              </grid>
              <grid id="fe5b0" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <component id="af3b0" class="javax.swing.JButton" binding="generateAndSortNumbersButton" default-binding="true">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Generate and Sort Numbers&#10;"/>
                    </properties>
                  </component>
                  <hspacer id="f175a">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </hspacer>
                  <hspacer id="e0839">
                    <constraints>
                      <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                    </constraints>
                  </hspacer>
                </children>
              </grid>
              <hspacer id="a092">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="f5ba5">
                <constraints>
                  <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
            </children>
          </grid>
          <grid id="ba2fd" layout-manager="GridLayoutManager" row-count="1" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="1" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <grid id="26563" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
                <margin top="0" left="0" bottom="0" right="0"/>
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
                <border type="none"/>
                <children>
                  <scrollpane id="27214">
                    <constraints>
                      <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="7" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties/>
                    <border type="none"/>
                    <children>
                      <component id="1b2be" class="javax.swing.JList" binding="originalList">
                        <constraints/>
                        <properties/>
                      </component>
                    </children>
                  </scrollpane>
                  <scrollpane id="77412">
                    <constraints>
                      <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="7" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties/>
                    <border type="none"/>
                    <children>
                      <component id="a1234" class="javax.swing.JList" binding="sortedList">
                        <constraints/>
                        <properties/>
                      </component>
                    </children>
                  </scrollpane>
                  <component id="4160d" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Original Numbers"/>
                    </properties>
                  </component>
                  <component id="7ff55" class="javax.swing.JLabel">
                    <constraints>
                      <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                    </constraints>
                    <properties>
                      <text value="Sorted Numbers"/>
                    </properties>
                  </component>
                </children>
              </grid>
            </children>
          </grid>
        </children>
      </grid>
    </children>
  </grid>
  <buttonGroups>
    <group name="acentionOrder">
      <member id="3c3a7"/>
      <member id="995da"/>
    </group>
    <group name="numberOfElements">
      <member id="6603c"/>
      <member id="4e9d1"/>
      <member id="dce47"/>
      <member id="a84a5"/>
    </group>
  </buttonGroups>
</form>
<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.zivoy.module2.Program4">
  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="3" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
    <margin top="5" left="5" bottom="5" right="5"/>
    <constraints>
      <xy x="20" y="20" width="500" height="400"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <grid id="2375f" layout-manager="GridLayoutManager" row-count="3" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <grid id="48ebd" layout-manager="GridLayoutManager" row-count="1" column-count="4" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <hspacer id="94f6">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <component id="a1fa9" class="javax.swing.JLabel">
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="ID to find: "/>
                </properties>
              </component>
              <hspacer id="c2497">
                <constraints>
                  <grid row="0" column="3" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <component id="82d9b" class="javax.swing.JSpinner" binding="spinner1" default-binding="true">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="0" hsize-policy="6" anchor="8" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties/>
              </component>
            </children>
          </grid>
          <grid id="68ed2" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
            <margin top="0" left="0" bottom="0" right="0"/>
            <constraints>
              <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties/>
            <border type="none"/>
            <children>
              <hspacer id="93e24">
                <constraints>
                  <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <hspacer id="e6a76">
                <constraints>
                  <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
              </hspacer>
              <component id="becb6" class="javax.swing.JButton" binding="button1" default-binding="true">
                <constraints>
                  <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
                </constraints>
                <properties>
                  <text value="Find Item"/>
                </properties>
              </component>
            </children>
          </grid>
          <component id="e7b63" class="javax.swing.JFormattedTextField" binding="titleTextField">
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="6" anchor="8" fill="1" indent="0" use-parent-layout="false">
                <preferred-size width="150" height="-1"/>
              </grid>
            </constraints>
            <properties>
              <editable value="false"/>
              <horizontalAlignment value="0"/>
              <text value=""/>
            </properties>
          </component>
        </children>
      </grid>
      <grid id="a178" layout-manager="GridLayoutManager" row-count="1" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="592c8" class="javax.swing.JLabel">
            <constraints>
              <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties>
              <font size="40"/>
              <text value="ID Searcher"/>
            </properties>
          </component>
          <hspacer id="2bc2e">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
            </constraints>
          </hspacer>
          <hspacer id="6b2f3">
            <constraints>
              <grid row="0" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
            </constraints>
          </hspacer>
        </children>
      </grid>
      <grid id="fb537" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="30c67" class="javax.swing.JLabel">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties>
              <text value="Bineary Search:"/>
            </properties>
          </component>
          <component id="cc304" class="javax.swing.JLabel">
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="0" anchor="8" fill="0" indent="0" use-parent-layout="false"/>
            </constraints>
            <properties>
              <text value="Linear Search: "/>
            </properties>
          </component>
          <component id="78869" class="javax.swing.JFormattedTextField" binding="bTextField">
            <constraints>
              <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="6" anchor="8" fill="1" indent="0" use-parent-layout="false">
                <preferred-size width="150" height="-1"/>
              </grid>
            </constraints>
            <properties>
              <editable value="false"/>
            </properties>
          </component>
          <component id="73ce1" class="javax.swing.JFormattedTextField" binding="lTextField">
            <constraints>
              <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="6" anchor="8" fill="1" indent="0" use-parent-layout="false">
                <preferred-size width="150" height="-1"/>
              </grid>
            </constraints>
            <properties>
              <editable value="false"/>
            </properties>
          </component>
        </children>
      </grid>
    </children>
  </grid>
</form>
<?xml version="1.0" encoding="UTF-8"?>
<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="com.zivoy.module2.ProgramSelector">
  <grid id="27dc6" binding="mainPanel" layout-manager="GridLayoutManager" row-count="3" column-count="3" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
    <margin top="0" left="0" bottom="0" right="0"/>
    <constraints>
      <xy x="20" y="20" width="500" height="400"/>
    </constraints>
    <properties/>
    <border type="none"/>
    <children>
      <vspacer id="c52f3">
        <constraints>
          <grid row="2" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false">
            <minimum-size width="5" height="5"/>
          </grid>
        </constraints>
      </vspacer>
      <grid id="7d939" layout-manager="GridLayoutManager" row-count="4" column-count="1" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
        <margin top="0" left="0" bottom="0" right="0"/>
        <constraints>
          <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="3" hsize-policy="3" anchor="0" fill="3" indent="0" use-parent-layout="false"/>
        </constraints>
        <properties/>
        <border type="none"/>
        <children>
          <component id="1cb47" class="javax.swing.JButton" binding="buttonProgram1">
            <constraints>
              <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
                <minimum-size width="80" height="20"/>
              </grid>
            </constraints>
            <properties>
              <text value="Program 1"/>
            </properties>
          </component>
          <component id="bba55" class="javax.swing.JButton" binding="buttonProgram2">
            <constraints>
              <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
                <minimum-size width="80" height="20"/>
              </grid>
            </constraints>
            <properties>
              <text value="Program 2"/>
            </properties>
          </component>
          <component id="d35df" class="javax.swing.JButton" binding="buttonProgram3">
            <constraints>
              <grid row="2" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
                <minimum-size width="80" height="20"/>
              </grid>
            </constraints>
            <properties>
              <text value="Program 3"/>
            </properties>
          </component>
          <component id="9d41c" class="javax.swing.JButton" binding="buttonProgram4">
            <constraints>
              <grid row="3" column="0" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
                <minimum-size width="80" height="20"/>
              </grid>
            </constraints>
            <properties>
              <text value="Program 4"/>
            </properties>
          </component>
        </children>
      </grid>
      <vspacer id="c84c9">
        <constraints>
          <grid row="0" column="1" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false">
            <minimum-size width="5" height="5"/>
          </grid>
        </constraints>
      </vspacer>
      <hspacer id="45a58">
        <constraints>
          <grid row="1" column="2" row-span="1" col-span="1" vsize-policy="1" hsize-policy="3" anchor="8" fill="0" indent="0" use-parent-layout="false">
            <minimum-size width="5" height="5"/>
            <maximum-size width="150" height="150"/>
          </grid>
        </constraints>
      </hspacer>
      <hspacer id="7653">
        <constraints>
          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false">
            <minimum-size width="5" height="5"/>
            <maximum-size width="150" height="150"/>
          </grid>
        </constraints>
      </hspacer>
    </children>
  </grid>
</form>
